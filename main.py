# pip install requests if needed
import sys

import requests
import json
import argparse
from dotenv import load_dotenv
import os
import csv
from datetime import datetime, date, timedelta
import mysql.connector
from database import connection_db
from database import insert_data
from database import list_bdd
from parsing import insert_json
from parsing import insert_csv
from parsing import parse_json

    
def create_csv():
    data = [
    ['Numéro CVE', 'Date de publication', 'Sévérité', 'Description', 'CVSS score', 'Plus d\'info']
    ]

    with open('cves.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f, delimiter=';')
        
        for line in data:
            writer.writerow(line)
    
def display_cves(num_cves):
    url = 'https://access.redhat.com/hydra/rest/securitydata/cve.json'
    
    response = requests.get(url)

    if response.status_code == 200:
        cve_data = json.loads(response.content)

        print("Vous préférez afficher les CVEs dans un fichier JSON ou un fichier texte ?")
        print("1. JSON")
        print("2. CSV")
        print("3. Les deux (JSON et CSV)")
        format = input("Entrez votre choix : ")

        parse_json(response, num_cves, format)
        if format == '1':
            print("Les données sont enregistrées dans le fichier cves.json")
            print("Les données sont enregistrées dans la base de données")
        
        elif format == '2':
            print("")
            print("Les données sont enregistrées dans le fichier cves.csv")
            print("Les données sont enregistrées dans la base de données")
            print("")

                    
        elif format == '3':
            print("")
            print("Les données sont enregistrées dans le fichier cves.csv")
            print("Les données sont enregistrées dans le fichier cves.json")
            print("Les données sont enregistrées dans la base de données")
            print("")

        else: 
            print("Choix invalide. Veuillez sélectionner une option valide.")
            exit()
        
        for cve in cve_data[:num_cves]:
            print(f"Numéro CVE : {cve['CVE']}")
            print(f"Date de publication : {cve['public_date']}")
            print(f"Sévérité : {cve['severity']}")
            print(f"Description: {cve['bugzilla_description']}")
            print(f"CVSS score: {cve['cvss3_score']}")
            print(f"Plus d'info: {cve['resource_url']}")
            print("")
            print("")
    else:
        print('Erreur lors de la récupération des données :', response.status_code)

def display_cve_info(cve_id):
    url = f'https://access.redhat.com/hydra/rest/securitydata/cve/{cve_id}'

    response = requests.get(url)

    if response.status_code == 200:
        cve = json.loads(response.content)
        
        insert_csv(cve_id, cve['public_date'], cve['threat_severity'], cve['bugzilla']['description'], cve['cvss3']['cvss3_base_score'], cve['bugzilla']['url'])
        insert_data(cve_id, cve['public_date'], cve['threat_severity'], cve['bugzilla']['description'], cve['cvss3']['cvss3_base_score'], cve['bugzilla']['url'])
        insert_json(cve)
            
        print(f"Numéro CVE : {cve_id}")
        print(f"Date de publication : {cve['public_date']}")
        print(f"Sévérité : {cve['threat_severity']}")
        print(f"Description: {cve['bugzilla']['description']}")
        print(f"CVSS score: {cve['cvss3']['cvss3_base_score']}")
        print(f"Plus d'info: {cve['bugzilla']['url']}")
        print("")
        print("Les données sont enregistrées dans le fichier cves.csv")
        print("Les données sont enregistrées dans le fichier cves.json")
        print("Les données sont enregistrées dans la base de données")
        print("")
        
    else:
        print('Erreur lors de la récupération des données :', response.status_code)

def parseArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--score', type=str)
    parser.add_argument('-S', '--scorev3', type=str)
    parser.add_argument('-se', '--severity', type=str)
    parser.add_argument('-p', '--product', type=str)
    parser.add_argument('-P', '--package', type=str)
    parser.add_argument('-c', '--cwe', type=str)
    parser.add_argument('-d', '--date', type=str)
    parser.add_argument('-b', '--before', type=str)
    parser.add_argument('-a', '--after', type=str)
    parser.add_argument('-n', '--number', type=int)
    
    args = parser.parse_args()

    url = 'https://access.redhat.com/hydra/rest/securitydata/cve.json?'

    if not len(sys.argv) > 1:
        while True:
            print("Sélectionnez une option :")
            print("1. Afficher un nombre de CVE spécifique")
            print("2. Afficher des informations sur une CVE précise")
            print("3. Afficher toutes les CVEs stockés dans la base de données")
            choice = input("Entrez votre choix : ")

            if choice == '1':
                num_cves = int(input("Combien de CVEs souhaitez-vous afficher ? "))
                print("")
                display_cves(num_cves)
            elif choice == '2':
                cve_id = input("Entrez le numéro CVE de la CVE que vous souhaitez afficher : ")
                print("")
                display_cve_info(cve_id)
            elif choice == '3':
                print("")
                list_bdd()
                print("")
                print("")
            else:
                print("Choix invalide. Veuillez sélectionner une option valide.")
                print("")
    else:
        arg_bool = 0
        num_cves = 10
        if args.score:
            if arg_bool == 0:
                url += "cvss_score=" + args.score
            else:
                url = "&" + "cvss_score=" + args.score
            arg_bool = 1


        if args.number:
            num_cves = args.number

        if args.product:
            if arg_bool == 0:
                url += "product=" + args.product
            else:
                url = "&" + "product=" + args.product
            arg_bool = 1

        if args.cwe:
            if arg_bool == 0:
                url += "cwe=" + args.cwe
            else:
                url = "&" + "cwe=" + args.cwe
            arg_bool = 1

        if args.scorev3:
            if arg_bool == 0:
                url += "cvss3_score=" + args.scorev3
            else:
                url = "&" + "cvss3_score=" + args.scorev3
            arg_bool = 1

        if args.date:
            today = datetime.now()
            user_date = datetime.strptime(args.date, "%Y/%m/%d")
            delta = (today - user_date).days

            if arg_bool == 0:
                url += "created_days_ago=" + args.scorev3
            else:
                url = "&" + "created_days_ago=" + str(delta)
            arg_bool = 1

        if args.package:
            if arg_bool == 0:
                url += "package=" + args.package
            else:
                url = "&" + "package=" + args.package
            arg_bool = 1

        if args.severity:
            param = ""
            if args.severity == "1":
                param = "low"
            elif args.severity == "2":
                param = "moderate"
            elif args.severity == "3":
                param = "important"

            if arg_bool == 0:
                url += "severity=" + param
            else:
                url = "&" + "severity=" + param
            arg_bool = 1

        if args.before:
            if arg_bool == 0:
                url += "before=" + args.before
            else:
                url = "&" + "before=" + args.before
            arg_bool = 1

        if args.after:
            if arg_bool == 0:
                url += "after=" + args.after
            else:
                url = "&" + "after=" + args.after
            
        response = requests.get(url)
        if response.status_code == 200:
            parse_json(response, num_cves, '3')


if __name__ == '__main__':
    create_csv()
    load_dotenv()
    parseArgs()
